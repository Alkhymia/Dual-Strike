<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="urn:strike-devices:configuration" xmlns:c="urn:strike-devices:configuration" elementFormDefault="qualified">
  <xs:element name="configuration" type="c:Configuration"/>

  <xs:complexType name="Configuration">
    <xs:sequence>
      <xs:element name="device" type="c:Field"/>
      <xs:element name="version" type="c:Field"/>
      <xs:group ref="c:Infos"/>
      <xs:element name="connectionHelp" maxOccurs="unbounded" type="c:Info"/>
      <xs:element name="page" type="c:Page" maxOccurs="unbounded"/>
      <xs:element name="valueDomain" maxOccurs="unbounded" type="c:ValueDomain"/>
    </xs:sequence>
    <xs:attribute name="def-lang-version" fixed="2" use="required" type="xs:int"/>
    <xs:attribute name="lang" type="xs:language" use="required"/>
    <xs:attribute name="prefix" type="xs:ID" use="required"/>
    <xs:attribute name="icon-path" type="c:RelativePath"/>
  </xs:complexType>
  
  <xs:simpleType name="Field">
    <xs:restriction base="xs:byte">
      <xs:minInclusive value="0"/>
    </xs:restriction>
  </xs:simpleType>
  
  <xs:group name="Infos">
    <xs:sequence>
      <xs:element name="title" maxOccurs="unbounded" type="c:Info"/>
      <xs:element name="help" minOccurs="0" maxOccurs="unbounded" type="c:PathInfo"/>
    </xs:sequence>
  </xs:group>
  
  <xs:complexType name="Info" >
    <xs:simpleContent>
      <xs:extension base="xs:string">
        <xs:attribute name="lang" type="xs:language"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  
  <xs:complexType name="PathInfo">
    <xs:complexContent>
      <xs:extension base="c:Info">
        <xs:attribute name="path" type="c:RelativePath"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="Page">
    <xs:sequence>
      <xs:group ref="c:Infos"/>
      <xs:choice maxOccurs="unbounded">
        <xs:element name="choice" type="c:ChoiceSetting"/>
        <xs:element name="boolean" type="c:BooleanSetting"/>
        <xs:element name="value" type="c:ValueSetting"/>
      </xs:choice>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="ChoiceSetting">
    <xs:sequence>
      <xs:group ref="c:Infos"/>
      <xs:element name="image" type="c:DescriptionImage" minOccurs="0"/>
      <xs:element name="option" type="c:Option" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="default" type="xs:IDREF" use="required">
      <xs:annotation><xs:documentation>
        This attribute has to refer to a option of the containing choice.
      </xs:documentation></xs:annotation>
    </xs:attribute>
    <xs:attribute name="prefix" type="c:SettingID"/>
  </xs:complexType>

  <xs:complexType name="BooleanSetting">
    <xs:complexContent>
      <xs:extension base="c:Setting">
        <xs:sequence>
          <xs:element name="image" type="c:DescriptionImage" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="default" type="xs:boolean"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  <xs:complexType name="ValueSetting">
    <xs:complexContent>
      <xs:extension base="c:Setting">
        <xs:sequence>
          <xs:element name="image" type="c:DescriptionImage" minOccurs="0"/>
        </xs:sequence>
        <xs:attribute name="domain" type="xs:IDREF" use="required">
          <xs:annotation><xs:documentation>
            The element referenced must be of the "ValueDomain" type.
          </xs:documentation></xs:annotation>
        </xs:attribute>
        <xs:attribute name="default" use="required">
          <xs:annotation><xs:documentation>
            This value must be greater or equal 0 and less than the number of entries in the referenced domain.
          </xs:documentation></xs:annotation>
          <xs:simpleType>
            <xs:restriction base="xs:unsignedInt">
              <xs:maxInclusive value="255"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  
  

  <xs:complexType name="Option">
    <xs:complexContent>
      <xs:extension base="c:Setting">
        <xs:sequence>
          <xs:element name="requires" type="xs:IDREF" minOccurs="0" maxOccurs="unbounded">
            <xs:annotation><xs:documentation>
              An element of this kind imposes two constraints on the configuration:
                -The containing option can only be activated if the referred
                 setting is set, i.e. in case of a boolean it is enabled and
                 in case of an option it is the current selection of its
                 containing choice.
                -If the containing option is the current selection of its
                 containing choice, the referred setting is set fix, i.e.
                 in case of a boolean it is not disengageable and in case of an
                 option the other options of its containing choice are not
                 selectable.
                 
              To prevent cascading changes and clashing requirements, the
              following cases must not occur (which the application has to check):
                -A choice A contains an option which is being required by a
                 choice B (A may be equal to B) and an option of A requires a
                 setting.
                -In one choice for a pair of options A and B, A is required
                 by a choice C, B is required by a choice D and C and D are
                 different choices.
            </xs:documentation></xs:annotation>
          </xs:element>
        </xs:sequence>      
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:complexType name="Setting" >
    <xs:group ref="c:Infos"/>
    <xs:attribute name="id" type="c:SettingID" use="required"/>
  </xs:complexType>
    
  <xs:simpleType name="SettingID">
    <xs:restriction base="xs:ID">
      <xs:pattern value="(\p{Lu}|_|\d)+"/>
    </xs:restriction>
  </xs:simpleType>
  
  <xs:complexType name="DescriptionImage">
    <xs:group ref="c:Infos"/>
    <xs:attribute name="path" type="c:RelativePath"/>
  </xs:complexType>

  <xs:simpleType name="RelativePath">
    <xs:restriction base="xs:string">
      <xs:pattern value="\w(/|\w|\.|\d| |-|_)*"/>
    </xs:restriction>
  </xs:simpleType>
  
  <xs:complexType name="Requires">
    <xs:annotation><xs:documentation>
      An element of this kind imposes two constraints on the configuration:
        -The containing option can only be activated if the referred
         setting is set, i.e. in case of a boolean it is enabled and
         in case of an option it is the current selection of its
         containing choice.
        -If the containing option is the current selection of its
         containing choice, the referred setting is set fix, i.e.
         in case of a boolean it is not disengageable and in case of an
         option the other options of its containing choice are not
         selectable.
         
      To prevent cascading changes and clashing requirements, the
      following cases must not occur (which the application has to check):
        -A choice A contains an option which is being required by a
         choice B (A may be equal to B) and an option of A requires a
         setting.
        -In one choice for a pair of options A and B, A is required
         by a choice C, B is required by a choice D and C and D are
         different choices.
      
      The attribute "requiredValue" must not only be used if the ID reference
      in the content refers to a element of the type "Value".
    </xs:documentation></xs:annotation>
    <xs:simpleContent>
      <xs:extension base="xs:IDREF">
        <xs:attribute name="requiredValue" type="xs:int"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>
  
  <xs:complexType name="ValueDomain">
    <xs:sequence>
      <xs:element name="entry" type="c:ValueDomainEntry" maxOccurs="255"/>
    </xs:sequence>
    <xs:attribute name="id" type="c:SettingID"/>
  </xs:complexType>
  
  <xs:complexType name="ValueDomainEntry">
    <xs:group ref="c:Infos" minOccurs="0"/>
  </xs:complexType>
</xs:schema>