Microcontroller Configuration Engine for Developers
===================================================

Author:    Michael Pohl
 Email:    pohl-michael@gmx.biz
 Homepage: http://pohl-michael.gmxhome.de

License: GNU General Public License V3
  (see "gpl-3.0.txt" or http://www.gnu.org/licenses/gpl-3.0.html)
Some files were released under different licenses, see the appropiate text
files for more information.

This is a framework for bit-based configurations giving the end user a
comfortable GUI and the developer easy handling of persistent settings.
It is aimed at usage with AVR microcontrollers to read out, modify and update
EEPROM configuration data. It makes heavy use of the XML technologies XML 
Schema and XSL Transformations.

The PC software part requires a Java 6 Runtime Environment. On all systems 
except Windows custom compilation of the "HID EEPROM Programmer" is necessary. 
See "HID_EEPROM_Programmer/Readme.txt" for more information on custom 
compilation. 


Usage for Projects
~~~~~~~~~~~~~~~~~~
All you need is to write a configuration definition file and generate a header
file from it which you have to use in your microcontroller firmware. You also 
have to include the required HID functionality, see the "Bootload_HID_V2" 
directory for details. 
Then you can bundle the definition file with the "mcc-*.*.*.jar" file together
with documentation (at least "Readme.txt" containing information about your
project) and other resources (like pictures used in the documentation).
All the user has to do apart from installing a Java 6+ Runtime Environment is to
start the "mcc-*.*.*.jar" (under most system including Windows a double click is
enough).

Start the "mcc-*.*.*.jar" file with the argument -h or --h to information how
to generate a header file. Any errors in your configuration file will be
displayed.

See "configuration-def.xml" for more information about the syntax and semantics.


Modifications to the Framework
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This is a Eclipse Helios project.
The most important components are described in the following sections.
For packaging use the "build.xml" Ant build file.


Important XML files:
--------------------
-"java/dualstrike/configuration/configuration-def.xsd"
 XML Schema for configuration definitions.
 
-"java/dualstrike/configuration/annotated-configuration-def.xsd"
 XML Schema for annotated configuration definitions, adding byte and bit information.

-"java/dualstrike/configuration/annotate-configuration-def.xsl"
 XSLT stylesheet adding byte and bit information to configuration definitions.

-"java/dualstrike/configuration/configuration-def2header-file.xsl"
 XSLT stylesheet to create a C header for AVR microcontrollers from
 configuration definitions.

-"configuration.xml"
 Example configuration definition for the Dual Strike.
 
 
Important Java Classes:
-----------------------
All Java source files reside in the directory "java".

-"mccf.Configuration"
 Main execution class.

-"mccf.definition.*"
 JAXB classes generated by the XJC from the annotated configuration XML Schema.

-"mccf.ConfigurationDefUtility"
 Class to work with configuration definition files.

-"mccf.HexFilesUtility"
 Class with methods to read and write plain HEX files to byte arrays and to
 write byte arrays to Intel 8-bit HEX files.

See the JavaDocs for more information.


Generating JAXB Configuration Definition Classes
------------------------------------------------
If the directory this file is residing in is the current directory and the
directory of a JDK is in the environment variable "JAVA_HOME", under windows
the command to compile the model classes from the annotated configuration XML
Schema is:
"%JAVA_HOME%\bin\xjc" -d java -p mccf.definition java\mccf\annotated-configuration-def.xsd
